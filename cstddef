// -*- C++ -*- forwarding header.

// Copyright (C) 1997, 1998, 1999, 2000, 2002 Free Software Foundation, Inc.
//
// This file is part of the GNU ISO C++ Library.  This library is free
// software; you can redistribute it and/or modify it under the
// terms of the GNU General Public License as published by the
// Free Software Foundation; either version 2, or (at your option)
// any later version.

// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License along
// with this library; see the file COPYING.  If not, write to the Free
// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,
// USA.

// As a special exception, you may use this file as part of a free software
// library without restriction.  Specifically, if other files instantiate
// templates or use macros or inline functions from this file, or you compile
// this file and link it with other files to produce an executable, this
// file does not by itself cause the resulting executable to be covered by
// the GNU General Public License.  This exception does not however
// invalidate any other reasons why the executable file might be covered by
// the GNU General Public License.

//
// ISO C++ 14882: 18.1  Types
//

/** @file cstddef
 *  This is a Standard C++ Library file.  You should @c #include this file
 *  in your programs, rather than any of the "*.h" implementation files.
 *
 *  This is the C++ version of the Standard C Library header @c stddef.h,
 *  and its contents are (mostly) the same as that header, but are all
 *  contained in the namespace @c std.
 */

#ifndef _CPP_CSTDDEF
#define _CPP_CSTDDEF 1

#ifdef __GCC__
#pragma GCC system_header
#endif

#include <stddef.h>

namespace std {
using ::nullptr_t;
using ::ptrdiff_t;
using ::size_t;
} // namespace std

#if __cplusplus >= 201703L
namespace std {
_GLIBCXX_BEGIN_NAMESPACE_VERSION
#define __cpp_lib_byte 201603

/// std::byte
enum class byte : unsigned char {};

template <typename _IntegerType> struct __byte_operand {};
template <> struct __byte_operand<bool> {
  using __type = byte;
};
template <> struct __byte_operand<char> {
  using __type = byte;
};
template <> struct __byte_operand<signed char> {
  using __type = byte;
};
template <> struct __byte_operand<unsigned char> {
  using __type = byte;
};
#ifdef _GLIBCXX_USE_WCHAR_T
template <> struct __byte_operand<wchar_t> {
  using __type = byte;
};
#endif
#ifdef _GLIBCXX_USE_CHAR8_T
template <> struct __byte_operand<char8_t> {
  using __type = byte;
};
#endif
template <> struct __byte_operand<char16_t> {
  using __type = byte;
};
template <> struct __byte_operand<char32_t> {
  using __type = byte;
};
template <> struct __byte_operand<short> {
  using __type = byte;
};
template <> struct __byte_operand<unsigned short> {
  using __type = byte;
};
template <> struct __byte_operand<int> {
  using __type = byte;
};
template <> struct __byte_operand<unsigned int> {
  using __type = byte;
};
template <> struct __byte_operand<long> {
  using __type = byte;
};
template <> struct __byte_operand<unsigned long> {
  using __type = byte;
};
template <> struct __byte_operand<long long> {
  using __type = byte;
};
template <> struct __byte_operand<unsigned long long> {
  using __type = byte;
};
#if defined(__GLIBCXX_TYPE_INT_N_0)
template <> struct __byte_operand<__GLIBCXX_TYPE_INT_N_0> {
  using __type = byte;
};
template <> struct __byte_operand<unsigned __GLIBCXX_TYPE_INT_N_0> {
  using __type = byte;
};
#endif
#if defined(__GLIBCXX_TYPE_INT_N_1)
template <> struct __byte_operand<__GLIBCXX_TYPE_INT_N_1> {
  using __type = byte;
};
template <> struct __byte_operand<unsigned __GLIBCXX_TYPE_INT_N_1> {
  using __type = byte;
};
#endif
#if defined(__GLIBCXX_TYPE_INT_N_2)
template <> struct __byte_operand<__GLIBCXX_TYPE_INT_N_2> {
  using __type = byte;
};
template <> struct __byte_operand<unsigned __GLIBCXX_TYPE_INT_N_2> {
  using __type = byte;
};
#endif
template <typename _IntegerType>
struct __byte_operand<const _IntegerType> : __byte_operand<_IntegerType> {};
template <typename _IntegerType>
struct __byte_operand<volatile _IntegerType> : __byte_operand<_IntegerType> {};
template <typename _IntegerType>
struct __byte_operand<const volatile _IntegerType>
    : __byte_operand<_IntegerType> {};

template <typename _IntegerType>
using __byte_op_t = typename __byte_operand<_IntegerType>::__type;

template <typename _IntegerType>
constexpr __byte_op_t<_IntegerType> operator<<(byte __b,
                                               _IntegerType __shift) noexcept {
  return (byte)(unsigned char)((unsigned)__b << __shift);
}

template <typename _IntegerType>
constexpr __byte_op_t<_IntegerType> operator>>(byte __b,
                                               _IntegerType __shift) noexcept {
  return (byte)(unsigned char)((unsigned)__b >> __shift);
}

constexpr byte operator|(byte __l, byte __r) noexcept {
  return (byte)(unsigned char)((unsigned)__l | (unsigned)__r);
}

constexpr byte operator&(byte __l, byte __r) noexcept {
  return (byte)(unsigned char)((unsigned)__l & (unsigned)__r);
}

constexpr byte operator^(byte __l, byte __r) noexcept {
  return (byte)(unsigned char)((unsigned)__l ^ (unsigned)__r);
}

constexpr byte operator~(byte __b) noexcept {
  return (byte)(unsigned char)~(unsigned)__b;
}

template <typename _IntegerType>
constexpr __byte_op_t<_IntegerType> &
operator<<=(byte &__b, _IntegerType __shift) noexcept {
  return __b = __b << __shift;
}

template <typename _IntegerType>
constexpr __byte_op_t<_IntegerType> &
operator>>=(byte &__b, _IntegerType __shift) noexcept {
  return __b = __b >> __shift;
}

constexpr byte &operator|=(byte &__l, byte __r) noexcept {
  return __l = __l | __r;
}

constexpr byte &operator&=(byte &__l, byte __r) noexcept {
  return __l = __l & __r;
}

constexpr byte &operator^=(byte &__l, byte __r) noexcept {
  return __l = __l ^ __r;
}

template <typename _IntegerType>
[[nodiscard]] constexpr _IntegerType
to_integer(__byte_op_t<_IntegerType> __b) noexcept {
  return _IntegerType(__b);
}

_GLIBCXX_END_NAMESPACE_VERSION
} // namespace std
#endif // C++17

#endif
